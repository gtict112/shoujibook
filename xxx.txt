 .\gradlew.bat app:dependencies
let module = Process.findModuleByName("libhelloworld.so");
// .rodata:0000000000000864 aHelloFromC     DCB "Hello from C++",0
let targetAddress = module.base.add(0x16A0);
Memory.protect(targetAddress, 0x10, '---');

Process.setExceptionHandler(function (details)
{
    if(details.type=="access-violation"){
        var operation = details.memory.operation;
        var memAddr = details.memory.address;
        console.log(DebugSymbol.fromAddress(details.context["pc"]))
        console.log("operation type:", operation);
        console.log("memory access addr:", memAddr);
        Memory.protect(targetAddress, 0x10, 'rwx');
    }
    return true;
});



Java.perform(() => {
    var StringClass = Java.use('java.lang.String'); // 使用 Java String 类
    var StandardCharsets = Java.use('java.nio.charset.StandardCharsets'); // 使用标准字符集类

    var myMethodHook = function(args) {
        try {
            // 将 args[3] 转换为 byte[]
            var byteArray = Java.cast(args[3], Java.array('byte')); // 强制转换为 byte[]

            // 使用 String(byte[], Charset) 构造 UTF-8 字符串
            var utf8String = StringClass.$new(byteArray, StandardCharsets.UTF_8.value);

            // 打印结果
            console.log("arg3:", utf8String);
        } catch (e) {
            console.error("Error decoding byte array:", e);
        }
    };

    // 示例，hook 你的目标方法
    var TargetClass = Java.use('your.target.ClassName'); // 替换为目标类
    TargetClass.targetMethod.implementation = function(...args) {
        myMethodHook(args);
        return this.targetMethod.apply(this, args);
    };
});


hmac
00000000  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66  |0123456789abcdef|   密钥
00000000  31 32 33 34 35 36                                |123456|          输入

第一步:
第一步，将密钥用 0 扩展到 64 字节长度，需要注意，这里是 0 是字节 0 ，不是数字 0
00000000  30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66  |0123456789abcdef|
00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|

第二步，将第一步所得 64 字节和 0x36 做异或运算

00000000  06 07 04 05 02 03 00 01 0e 0f 57 54 55 52 53 50  |..........WTURSP|
00000010  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|
00000020  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|
00000030  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|


第三步，将Message，即输入数据附加到第二步所得数据的末尾

00000000  06 07 04 05 02 03 00 01 0e 0f 57 54 55 52 53 50  |..........WTURSP|
00000010  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|
00000020  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|
00000030  36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  |6666666666666666|
00000040  31 32 33 34 35 36                                |123456|


第四步，对第三步所得数据做 SHA1

00000000  5f 38 bc c4 04 3d 9e 69 ed c5 b4 69 a0 19 22 85  |_8¼Ä.=.iíÅ´i .".|
00000010  0b 02 db 8d                                      |..Û.|


第五步，将第一步所得 64 字节和 0x5C 做异或

00000000  6c 6d 6e 6f 68 69 6a 6b 64 65 3d 3e 3f 38 39 3a  |lmnohijkde=>?89:|
00000010  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|
00000020  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|
00000030  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|


第六步，将第四步所得 SHA1 结果附加到第五步所得数据的末尾
00000000  6c 6d 6e 6f 68 69 6a 6b 64 65 3d 3e 3f 38 39 3a  |lmnohijkde=>?89:|
00000010  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|
00000020  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|
00000030  5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c 5c  |\\\\\\\\\\\\\\\\|
00000040  5f 38 bc c4 04 3d 9e 69 ed c5 b4 69 a0 19 22 85  |_8¼Ä.=.iíÅ´i .".|
00000050  0b 02 db 8d                                     		 |..Û.|


第七步，对第六步所得数据做 SHA1，得到最终结果
00000000  6d 47 5b 4d a8 6d 60 3d 31 27 75 9c 1a d5 ff b6  |mG[M¨m`=1'u..Õÿ¶|
00000010  5d 05 df 70                                                          |].ßp|


算法	分组长度（字节）	结果长度（字节）
MD5	64	16
SHA-1	64	20
SHA-256	64	32
SHA-512	128	64
SHA3-256	136	32
SHA3-512	72	64



var clazz = Java.use("java.lang.Class");
    clazz.forName.overload('java.lang.String', "boolean", "java.lang.ClassLoader").implementation 
            = function (name, b, loader) {
        var result = this.forName(name, b, loader);
        if (name == "xxxx") {

        }
        return result;
    }



